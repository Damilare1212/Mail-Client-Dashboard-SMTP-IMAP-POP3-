<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style  TargetType="Window" x:Key="WIN">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="ShowInTaskbar" Value="True" />
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="150"/>
        <Setter Property="MinWidth" Value="250"/>
        <Setter Property="Opacity" Value="1.0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowState}" Value="Maximized">
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Grid" x:Key="StoryBoardClickStyle">
        <Style.Resources>
            <Storyboard x:Key="Storyboardclick" AutoReverse="True">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="{x:Null}">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.9">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <PowerEase EasingMode="EaseOut"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="{x:Null}">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.9">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <PowerEase EasingMode="EaseOut"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseLeftButtonDown">
                <BeginStoryboard Storyboard="{StaticResource Storyboardclick}"/>
            </EventTrigger>
        </Style.Triggers>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </Setter.Value>
        </Setter>

    </Style>
    <Style x:Key="Window.Button" TargetType="Button">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="1,0,0,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Fill="{TemplateBinding Foreground}" Data="{TemplateBinding Property=Path.Data}" Width="{TemplateBinding Property=Path.Width}" Height="{TemplateBinding Property=Path.Height}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource PressColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}"/>
            </Trigger>

        </Style.Triggers>


    </Style>
    <Style x:Key="Window.Button.Minimize" TargetType="Button" BasedOn="{StaticResource Window.Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="M15,12L30,12 30,27 15,27z" Width="11" Height="1" Fill="{TemplateBinding Foreground}" Stretch="Fill" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
       
    </Style>

    <Style TargetType="Button" x:Key="Window.Button.Maximize" BasedOn="{StaticResource Window.Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="M0,0L0,11 12,11 12,0 0,0z M11,10L1,10 1,1 11,1 11,10z" Width="12" Height="11" Fill="{TemplateBinding Foreground}" Stretch="Fill"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="Window.Button.Close" BasedOn="{StaticResource Window.Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{TemplateBinding Background}">
                        <Path Data="M11,0.7L10.3,0 5.5,4.8 0.7,0 0,0.7 4.8,5.5 0,10.3 0.7,11 5.5,6.2 10.3,11 11,10.3 6.2,5.5z" Width="11" Height="11" Fill="{TemplateBinding Foreground}" Stretch="Fill"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StyleBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="3"></Setter>
        <Setter Property="CornerRadius" Value="4,8,8,4"></Setter>
        <Setter Property="BorderBrush" Value="#FFC0C0C0"></Setter>
    </Style>
</ResourceDictionary>